CREATE DATABASE STTE;
USE STTE;
--TEACHER TABLE
CREATE TABLE TEACHER
(
T_ID INT PRIMARY KEY,
NAME VARCHAR(20),
AGE INT
)

--STUDENT TABLE
CREATE TABLE STUDENT
(
S_ID INT PRIMARY KEY,
NAME VARCHAR(20),
MARKS INT
)

--COURSE TABLE
CREATE TABLE COURSE 
(
C_ID INT PRIMARY KEY,
CODE VARCHAR(5),
NAME VARCHAR(10)
)

--TEACHER COURSE
CREATE TABLE T_COURSE 
(
T_ID INT FOREIGN KEY REFERENCES TEACHER(T_ID),
C_ID INT FOREIGN KEY REFERENCES COURSE(C_ID)
)
--STUDENT COURSE
CREATE TABLE S_COURSE 
(
S_ID INT FOREIGN KEY REFERENCES STUDENT(S_ID),
C_ID INT FOREIGN KEY REFERENCES COURSE(C_ID)
)

--INSERTING TEACHER TABLE
INSERT INTO TEACHER VALUES 
(1, 'John Doe', 35),
(2, 'Jane Smith', 28),
(3, 'David Lee', 42),
(4, 'Lisa Chen', 31),
(5, 'Michael Kim', 25);

--INSERTING STUDENT TABLE
INSERT INTO STUDENT VALUES 
(11, 'Alice Smith', 85),
(12, 'Bob Johnson', 92),
(13, 'Charlie Brown', 78),
(14, 'David Lee', 80),
(15, 'Emily Davis', 95);

--INSERTING COURSE TABLE
INSERT INTO COURSE VALUES
(21, 'MATH', 'Maths'),
(22, 'PHYS', 'Physics'),
(23, 'CHEM', 'Chemistry'),
(24, 'ENG', 'English'),
(25, 'BIO', 'Biology');

--INSERTING TEACHER COURSE TABLE
INSERT INTO T_COURSE VALUES 
(1,21),
(2,22),
(3,23),
(4,24),
(5,25)
--INSERTING STUDENT COURSE TABLE
INSERT INTO S_COURSE VALUES
(11,21),
(12,22),
(13,23),
(14,24),
(15,25)

---TO DROP TABLES/DATABASE
DROP DATABASE STTE;
DROP TABLE TEACHER;
DROP TABLE STUDENT;
DROP TABLE COURSE;
DROP TABLE T_COURSE;
DROP TABLE S_COURSE;

--TABLES DETAILS
SELECT * FROM [dbo].[S_COURSE];
SELECT * FROM [dbo].[STUDENT];
SELECT * FROM [dbo].[COURSE];
SELECT * FROM [dbo].[T_COURSE];
SELECT * FROM [dbo].[TEACHER];

---QUERIES
-- To retrieve the names of all teachers and their associated courses
SELECT T.T_ID,T.NAME AS TEACHER_NAME,C.NAME AS COURSE_NAME FROM TEACHER AS T JOIN T_COURSE AS TC ON T.T_ID = TC.T_ID JOIN COURSE AS C
ON C.C_ID=TC.C_ID
--STUDENT SHOULD GET THE NAME OF THE COURSES THAT THEY REGISTERD.
SELECT S.NAME,C.NAME FROM STUDENT AS S JOIN S_COURSE AS SC ON S.S_ID=SC.S_ID JOIN COURSE AS C ON C.C_ID=SC.C_ID
--
SELECT C.NAME AS COURSE_NAME,
T.NAME AS TEACHER_NAME,
S.NAME AS STUDENT_NAME FROM TEACHER AS T 
JOIN
T_COURSE AS TC ON T.T_ID = TC.T_ID 
JOIN
COURSE AS C ON C.C_ID=TC.C_ID 
JOIN
S_COURSE AS SC ON C.C_ID=SC.C_ID 
JOIN
STUDENT AS S ON S.S_ID=SC.S_ID

--
SELECT TEACHER.NAME, COURSE.NAME
FROM TEACHER 
INNER JOIN T_COURSE 
ON TEACHER.T_ID = T_COURSE.T_ID 
INNER JOIN COURSE 
ON T_COURSE.C_ID = COURSE.C_ID;

--
SELECT T.T_ID,T.NAME,C.NAME FROM TEACHER AS T JOIN T_COURSE AS TC ON T.T_ID = TC.T_ID JOIN COURSE AS C
ON C.C_ID=TC.C_ID


--To retrieve the names of all teachers and their associated courses
--To retrieve the names of all courses and the number of students enrolled in each course
--To retrieve the names of all teachers who have no associated courses:
--To retrieve the highest marks of each student:
--To retrieve the names of all students who are enrolled in a course taught by a specific teacher:
--To retrieve the total number of courses taught by each teacher:


--stored procedure
CREATE PROCEDURE T_DATA
AS
BEGIN
SELECT T.T_ID,
T.NAME AS TEACHER_NAME,
C.NAME AS COURSE_NAME FROM TEACHER AS T 
JOIN T_COURSE AS TC ON 
T.T_ID = TC.T_ID
JOIN COURSE AS C
ON C.C_ID=TC.C_ID
END;

EXEC T_DATA;
--
CREATE PROCEDURE T_DETAILS
@NAME VARCHAR(20)
AS
BEGIN
SELECT * FROM TEACHER WHERE 
NAME = @NAME
END;

EXEC T_DETAILS 'DAVID LEE' 
---- HOW TO DELETE A STORED PROCEDURE 
DROP PROCEDURE T_D;